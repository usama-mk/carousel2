{"version":3,"sources":["firebase.js","Pages/carousel.jsx","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","storage","React","require","Carousel","DemoCarousel","state","imageUrls","transTime","that","this","IU","ref","listAll","then","result","items","forEach","imageRef","getDownloadURL","url","push","setState","console","log","collection","onSnapshot","snapshot","docs","map","doc","id","data","setTimeout","window","location","reload","className","autoPlay","interval","transitionTime","infiniteLoop","swipeable","emulateTouch","dynamicHeight","showThumbs","IconButton","href","form","style","width","alt","src","height","display","alignItems","justifyContent","Component","App","exact","path","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0VAeQA,G,MADaC,IAASC,cAXP,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIKC,aAChBC,EAASX,IAASW,UCXtBC,EAAQC,EAAQ,GAChBC,EAAWD,EAAQ,IAA6BC,SAG9CC,E,kDAIF,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,UAAU,KACVC,UAAW,MAJN,E,gEAab,IAAMC,EAAKC,KACLC,EAAG,GAETV,EAAQW,IAAI,UAAUC,UAAUC,MAAK,SAASC,GAC1CA,EAAOC,MAAMC,SAAQ,SAASC,GAE1BA,EAASC,iBAAiBL,MAAK,SAASM,GAEpCT,EAAGU,KAAKD,GAGbX,EAAKa,SAAL,2BAAkBb,EAAKH,OAAvB,IAA6BC,UAAWI,KAAK,kBAAKY,QAAQC,IAAIf,EAAKH,MAAMC,cAEpEgB,QAAQC,IAAIf,EAAKH,aAMzBiB,QAAQC,IAAI,UACZD,QAAQC,IAAIb,GAGZtB,EAAGoC,WAAW,cAAcC,YAAW,SAACC,GAEzClB,EAAKa,SAAL,2BAAkBb,EAAKH,OAAvB,IAA8BE,UAAWmB,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAC5D,CACGC,GAAID,EAAIC,GACRC,KAAMF,EAAIE,iBAKdC,YAAW,WACPC,OAAOC,SAASC,WACjB,MACHb,QAAQC,IAAI,yCACZD,QAAQC,IAAIf,EAAKH,MAAME,gB,+BAsB3B,OACKE,KAAKJ,MAAMC,WAAaG,KAAKJ,MAAME,UACpC,uBAAK6B,UAAU,YAEX,gBAACjC,EAAD,CAAUkC,UAAQ,EAACC,SAAW7B,KAAKJ,MAAME,UAAU,GAAGwB,KAAKQ,eAAgBC,cAAY,EAACC,WAAS,EAACC,cAAY,EAACC,eAAa,EAACC,YAAY,GAEpInC,KAAKJ,MAAMC,UAAUsB,KAAI,SAACT,GAAD,OACrB,2BAEG,gBAAC0B,EAAA,EAAD,CAAYC,KAAMC,EAAMC,MAAO,CAAEC,MAAO,SACpC,uBAAKC,IAAI,aAAaC,IAAKhC,EAAKiC,OAAO,MAAMH,MAAM,cAQ3D,2BAAK,0BACL,6BAKC,2BACA,sBAAID,MAAO,CAACK,QAAS,OAAQC,WAAY,SAAUC,eAAe,WAAlE,0B,GArGMtD,EAAMuD,WAgH3BT,EAAO,qCACE3C,ICpGAqD,MAff,WACE,OAEE,yBAAKrB,UAAU,OAEb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAK,kBAAC,EAAD,YCDrBC,QACW,cAA7B5B,OAAOC,SAAS4B,UAEe,UAA7B7B,OAAOC,SAAS4B,UAEhB7B,OAAOC,SAAS4B,SAASC,MACvB,2D,YCVNC,IAASJ,OACP,kBAAC,IAAD,KAEA,kBAAC,IAAMK,WAAP,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.f77fea21.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCW8KRQdx2ZLPW3wmNHUIpXG1QgfGWfCyI\",\n    authDomain: \"carousel-client.firebaseapp.com\",\n    databaseURL: \"https://carousel-client.firebaseio.com\",\n    projectId: \"carousel-client\",\n    storageBucket: \"carousel-client.appspot.com\",\n    messagingSenderId: \"380997395852\",\n    appId: \"1:380997395852:web:ac88383e5d8199e27be2a9\",\n    measurementId: \"G-T6CD1GENRX\"\n  };\n  // Initialize Firebase\n  const firebaseApp= firebase.initializeApp(firebaseConfig);\n  const db= firebaseApp.firestore();\n  const storage= firebase.storage();\n\n  export{storage,db, firebase as default};","import \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport './carousel.css';\nimport { Button, IconButton } from '@material-ui/core';\nimport { storage } from \"../firebase\";\nimport { db } from \"../firebase\";\nvar React = require('react');\nvar Carousel = require('react-responsive-carousel').Carousel;\n\n\nclass DemoCarousel extends React.Component {\n   \n   \n\n    constructor(){\n        super();\n        this.state={\n            imageUrls:null,\n            transTime: null,\n        }\n        \n    }\n\n\n\n\ncomponentDidMount(){\n    const that=this;\n    const IU=[];\n\n    storage.ref(\"images\").listAll().then(function(result){\n        result.items.forEach(function(imageRef){\n            // console.log(\"Image reference\"+ imageRef);\n            imageRef.getDownloadURL().then(function(url){\n                // console.log(url)\n                IU.push(url);\n                // that.setState({imageUrls: IU}\n               \n           that.setState({...that.state,imageUrls: IU}, ()=> console.log(that.state.imageUrls));\n                \n                console.log(that.state)\n  \n            })\n            \n            \n        })\n        console.log(\"IIIUUU\")\n        console.log(IU);\n        // that.setState({...that.state, transTime: })\n      \n        db.collection('transition').onSnapshot((snapshot)=>\n        {\n       that.setState({...that.state, transTime: snapshot.docs.map(doc =>                             \n        ({\n            id: doc.id,        //the unique 'auto' ids\n            data: doc.data(),  //the data inside the doc(coll>doc>data)\n        })\n        )} )\n        } );\n      \n        setTimeout(function () {\n            window.location.reload()\n        }, 120000);\n        console.log(\"WITH ZZZZZZZZZZZZZZZZZZZZZZ TIMESTATE\")\n        console.log(that.state.transTime)\n         \n\n         \n    });\n\n    \n}\n\n\n \n\n// handleTransTime=(event)=>{\n//     // console.log(event.target.value)\n//     this.setState({...this.setState.imageUrls, transTime: event.target.value})\n// }\n\n\n \n\nrender(){\n   \n    return (\n        (this.state.imageUrls)&&(this.state.transTime)?\n        <div className=\"carousel\">\n\n            <Carousel autoPlay interval={ this.state.transTime[0].data.transitionTime} infiniteLoop swipeable emulateTouch dynamicHeight showThumbs={false} >\n\n                {this.state.imageUrls.map((url) =>\n                    (<div>\n\n                        <IconButton href={form} style={{ width: \"99vw\" }}>\n                            <img alt=\"Not Loaded\" src={url} height=\"400\" width=\"480\" />\n\n                        </IconButton>\n                        </div>\n                    )\n                )\n                    }\n                    </Carousel>\n                    <br/><b></b>\n                    <div>\n                    {/* <label style={{fontWeight:\"bold\", margin: \"20px\"}} >Enter the speed of Transitions in Milliseconds</label>\n                        <input type=\"number\" min=\"0\" value={this.state.transTime} onChange={this.handleTransTime}/> */}\n                    </div>\n                    </div>:\n                     <div>\n                     <h1 style={{display: \"flex\", alignItems: \"center\", justifyContent:\"center\"}}>Fetching Data ...</h1>\n                     </div>\n\n\n    );\n\n}\n \n\n}\n\nconst form = \"https://goasolutions.paperform.co/\";\nexport default DemoCarousel;\n\n\n\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport DemoCarousel from './Pages/carousel';\n\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n  \n      <Switch>\n      <Route exact path='/' render={()=>(<DemoCarousel />)}  />\n       \n    \n     </Switch>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router} from 'react-router-dom';\n\n\nReactDOM.render(\n  <Router>\n    \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}